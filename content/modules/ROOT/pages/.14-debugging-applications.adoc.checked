Here is the corrected version of the AsciiDoc content:

= Debugging Applications

OpenShift provides several tools and techniques to help developers and administrators identify and resolve issues with running applications. This section walks through the general debugging approach and then dives into tools for debugging processes, networking, and storage.

== Debug Process

When something goes wrong with an application running on OpenShift, follow a systematic debugging approach:

1. **Check the Pod Status**:
+
[source,sh]
----
oc get pods
----
2. **Inspect Events** for failures or restarts:
+
[source,sh]
----
oc describe pod "pod-name"
----
3. **Check Logs**:
+
[source,sh]
----
oc logs "pod-name"
----
4. **Open a Remote Shell** to investigate interactively:
+
[source,sh]
----
oc rsh "pod-name"
----

These steps help isolate whether the issue is in the application, container, environment, or platform.

=== Exercise: Basic Debug Workflow

. Deploy a known working app (e.g., `nginx`).
. Break it by misconfiguring the image or command.
. Use the steps above to investigate the failure and identify the root cause.

== Debug Pod

OpenShift includes a powerful feature: the `oc debug` command. This launches a new **debug pod** based on the original pod's configuration, giving you root access and debugging tools.

[source,sh]
----
oc debug pod/"pod-name"
----

By default, this creates a new pod with a debugging image (like `tools`), mounts the same volumes, and starts a shell.

TIP: You can also debug a node:

[source,sh]
----
oc debug node/"node-name"
----

This launches a privileged container running on the target node.

=== Exercise: Use a Debug Pod

. Create a pod (e.g., `oc run mypod --image=nginx`).
. Use:
+
[source,sh]
----
oc debug pod/mypod
----
. From the debug shell, list files, test networking, or inspect mounts:
+
[source,sh]
----
ls /etc
env
ping google.com
----

== Debug Network

Network issues are common in distributed systems. OpenShift offers several tools for network debugging:

* Use `oc rsh` or `oc debug` to enter the container and run tools like `curl`, `ping`, or `dig`.
* Check **NetworkPolicies** that might block traffic.
* Validate DNS resolution:
+
[source,sh]
----
dig myservice.myproject.svc.cluster.local
----

Example: Test connectivity between pods:

[source,sh]
----
curl http://myservice:8080
----

TIP: Use `tcpdump` in a debug pod for deep packet inspection (requires tools image).

=== Exercise: Network Debug

. Deploy two pods in the same project.
. From one pod, try to reach the other using its service name and IP.
. If using **NetworkPolicies**, add one that blocks access and test again.
. Debug with `oc exec`, `curl`, and `dig`.

== Debug Storage

Storage issues often manifest as read/write errors, stuck pods, or failed mounts.

Checklist:

* Inspect pod events for mount errors:
+
[source,sh]
----
oc describe pod "pod-name"
----
* Use `oc debug` to inspect mounted volumes:
+
[source,sh]
----
mount | grep pvc
ls /mnt/data
----
* Look for file permission errors or full volumes.
* If using **Persistent Volumes Claims (PVCs)**, check their status:
+
[source,sh]
----
oc get pvc
----

TIP: Some storage issues require checking backend logs (e.g., NFS, Ceph, etc.)â€”consult your storage administrator if needed.

=== Exercise: Debug a PVC

. Create a pod that mounts a **PVC**.
. Use `oc debug` to explore the mounted volume.
. Simulate an error by trying to write to a read-only volume.
. Check permissions and volume status.

Changes made:

* Added an article ("a" or "an") before some nouns for better grammar.
* Changed some sentence structures for improved clarity.
* Standardized formatting of code blocks and emphasized text.
* Made minor wording changes for consistency in tone.
* Changed "Network Policies" to "**NetworkPolicies**" for consistency in formatting.