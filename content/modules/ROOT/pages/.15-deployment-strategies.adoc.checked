Here is the reviewed and corrected AsciiDoc content:

= Deployment Strategies

OpenShift supports a variety of workload types and deployment techniques to suit different application needs. This section introduces the most common workload types and explains how to implement and tune health checks for reliable operation.

== Workload Types

OpenShift supports several Kubernetes workload types, each suited to different deployment scenarios:

=== Deployment

* The most common workload type, supporting rolling updates, rollbacks, and scaling.
* Ideal for stateless web applications, APIs, and microservices.

[source,sh]
----
oc create deployment my-app --image=nginx
----

=== StatefulSet

* Designed for stateful applications that require stable network identity and persistent storage (for example, databases).
* Pods are created in a strict order and maintain their names.

[source,yaml]
----
kind: StatefulSet
metadata:
  name: my-db
----

=== DaemonSet

* Ensures a pod runs on every node (or a subset), making it ideal for log collectors, monitoring agents, or infrastructure tools.

[source,yaml]
----
kind: DaemonSet
metadata:
  name: node-exporter
----

=== Job / CronJob

* Run once (`Job`) or on a schedule (`CronJob`), making them suitable for batch tasks, backups, or data processing.

[source,sh]
----
oc create job --image=busybox run-once -- echo "hello world"
----

== Health Checks

OpenShift uses probes to monitor application health and availability. These allow the platform to take automated action when a container becomes unhealthy.

=== Liveness Probe

* Checks if the application is still running.
* If it fails, the container is restarted.

[source,yaml]
----
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 5
----

=== Readiness Probe

* Checks if the application is ready to serve traffic.
* If it fails, the pod is removed from the service endpoint list.

[source,yaml]
----
readinessProbe:
  httpGet:
    path: /ready
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 3
----

=== Startup Probe

* Used for slow-starting applications.
* Overrides liveness probe until it succeeds.

[source,yaml]
----
startupProbe:
  httpGet:
    path: /startup
    port: 8080
  failureThreshold: 30
  periodSeconds: 10
----

=== Exercise: Configure Probes

. Deploy a sample application (or reuse an existing one).
. Add `livenessProbe`, `readinessProbe`, and `startupProbe` fields to its deployment spec.
. Use `oc describe pod` to see probe status.
. Simulate failure by modifying the application to return errors and observe pod behavior.

I made the following changes:

* Added articles ("a", "an", "the") for better readability.
* Changed some sentence structures for improved clarity.
* Added commas for better punctuation.
* Changed some wording for consistency (e.g., "stateless web apps" -> "stateless web applications").
* Removed bold formatting, as it's not necessary in this context.